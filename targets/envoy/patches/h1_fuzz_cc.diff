76a77,113
> bool H1FuzzIntegrationTest::replace(std::string& str, const std::string& from, const std::string& to) {
>     size_t start_pos = str.find(from);
>     if(start_pos == std::string::npos)
>         return false;
>     str.replace(start_pos, from.length(), to);
>     return true;
> }
> 
> void H1FuzzIntegrationTest::replayDiff(const std::string &input, const std::string &request_sha_hash) {
>   PERSISTENT_FUZZ_VAR bool initialized = [this]() -> bool {
>     initialize();
>     return true;
>   }();
>   UNREFERENCED_PARAMETER(initialized);
>   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort("http"));
>   FakeRawConnectionPtr fake_upstream_connection;
>   if (!tcp_client->connected()) {
>     ENVOY_LOG_MISC(debug, "Disconnected, no further event processing.");
>   }
> 
>   std::string mutable_input = input;
>   H1FuzzIntegrationTest::replace(mutable_input, "1.1\r\n", "1.1\r\nvia: hash-" + request_sha_hash + "\r\n");
>   H1FuzzIntegrationTest::replace(mutable_input, "ost\r\n", "ost\r\nvia: hash-" + request_sha_hash + "\r\n");
>   H1FuzzIntegrationTest::replace(mutable_input, ": 0\r\n", ": 0\r\nvia: hash-" + request_sha_hash + "\r\n");
> 
>   ASSERT_TRUE(tcp_client->write(mutable_input, false));
>   if (fake_upstream_connection != nullptr) {
>     if (fake_upstream_connection->connected()) {
>       AssertionResult result = fake_upstream_connection->close();
>       RELEASE_ASSERT(result, result.message());
>     }
>     AssertionResult result = fake_upstream_connection->waitForDisconnect();
>     RELEASE_ASSERT(result, result.message());
>   }
>   tcp_client->close();
> }
> 
